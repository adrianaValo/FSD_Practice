https://github.com/adrianaValo/FSD_Practice/tree/main/Phase%202/Project


	Bean Classes - package com.funfit.bean:

	Batch:

package com.funfit.bean;

public class Batch {
	private int bid;
	private String typeofbatch;
	private String time;
	public Batch() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Batch(int bid, String typeofbatch, String time) {
		super();
		this.bid = bid;
		this.typeofbatch = typeofbatch;
		this.time = time;
	}
	public int getBid() {
		return bid;
	}
	public void setBid(int bid) {
		this.bid = bid;
	}
	public String getTypeofbatch() {
		return typeofbatch;
	}
	public void setTypeofbatch(String typeofbatch) {
		this.typeofbatch = typeofbatch;
	}
	public String getTime() {
		return time;
	}
	public void setTime(String time) {
		this.time = time;
	}
	@Override
	public String toString() {
		return "Batch [bid=" + bid + ", typeofbatch=" + typeofbatch + ", time=" + time + "]";
	}
	

}

	Participants:

package com.funfit.bean;

public class Participants {
	private int pid;
	private String fname;
	private int age;
	private String phonenumber;
	private int bid;
	public Participants() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Participants(int pid, String fname, int age, String phonenumber, int bid) {
		super();
		this.pid = pid;
		this.fname = fname;
		this.age = age;
		this.phonenumber = phonenumber;
		this.bid = bid;
	}
	public int getPid() {
		return pid;
	}
	public void setPid(int pid) {
		this.pid = pid;
	}
	public String getFname() {
		return fname;
	}
	public void setFname(String fname) {
		this.fname = fname;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public String getPhonenumber() {
		return phonenumber;
	}
	public void setPhonenumber(String phonenumber) {
		this.phonenumber = phonenumber;
	}
	public int getBid() {
		return bid;
	}
	public void setBid(int bid) {
		this.bid = bid;
	}
	@Override
	public String toString() {
		return "Participants [pid=" + pid + ", fname=" + fname + ", age=" + age + ", phonenumber=" + phonenumber
				+ ", bid=" + bid + "]";
	}
	
	
}
===============================================================================================================================

	Dao Classes - package com.funfit.dao

	BatchDao:

package com.funfit.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.funfit.bean.Batch;
import com.funfit.resource.DbResource;


public class BatchDao {
	
	// Add batch method
		public int addBatch(Batch batch) {
			try {
				Connection con = DbResource.getDbConnection();
				PreparedStatement pstmt = con.prepareStatement("insert into batch(typeofbatch, time) values (?,?)");
				pstmt.setString(1, batch.getTypeofbatch());
				pstmt.setString(2, batch.getTime());
				return pstmt.executeUpdate();
			} catch (Exception e) {
				System.err.println(e);
				return 0;
			}
		}
		// method to list all the batches
		public List<Batch> viewAllBatches() {
			List<Batch> listOfBatch = new ArrayList<>();
			try {
				Connection con = DbResource.getDbConnection();
				PreparedStatement pstmt = con.prepareStatement("select * from batch");
				ResultSet rs = pstmt.executeQuery();
				while(rs.next()) {
					Batch b = new Batch();
					b.setBid(rs.getInt(1));
					b.setTypeofbatch(rs.getString(2));
					b.setTime(rs.getString(3));
					listOfBatch.add(b);
				}
			} catch (Exception e) {
				System.err.println(e);
				
			}
			return listOfBatch;
		}
		
		// delete the batch after the bid
		public int deleteBatch(int bid) {
	        try {
	            Connection con = DbResource.getDbConnection();
	            PreparedStatement pstmt = con.prepareStatement("delete from batch where bid = ?");
	            pstmt.setInt(1, bid);
	            return pstmt.executeUpdate();
	        } catch (Exception e) {
	            System.err.println(e);
	            return 0;
	        }
	    }
}


	ParticipantsDao:

package com.funfit.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.funfit.bean.Participants;
import com.funfit.resource.DbResource;

public class ParticipantsDao {
	public int addParticipants(Participants participants) {
		try {
			Connection con = DbResource.getDbConnection();
			PreparedStatement pstmt = con.prepareStatement("insert into participants(fname, age, phonenumber, bid) values(?,?,?,?)");
			pstmt.setString(1, participants.getFname());
			pstmt.setInt(2, participants.getAge());
			pstmt.setString(3, participants.getPhonenumber());
			pstmt.setInt(4, participants.getBid());		
			return pstmt.executeUpdate();
		} catch (Exception e) {
			System.err.println(e);
			return 0;
		}
	}
	
	public List<Participants> viewAllParticipants() {
		List<Participants> listOfParticipants = new ArrayList<>();
		try {
			Connection con = DbResource.getDbConnection();
			PreparedStatement pstmt = con.prepareStatement("select * from participants");
			ResultSet rs = pstmt.executeQuery();
			while(rs.next()) {
				Participants p = new Participants();
				p.setPid(rs.getInt(1));
				p.setFname(rs.getString(2));
				p.setAge(rs.getInt(3));
				p.setPhonenumber(rs.getString(4));
				p.setBid(rs.getInt(5));
				listOfParticipants.add(p);
			}
		} catch (Exception e) {
			System.err.println(e);
			
		}
		return listOfParticipants;
	}
	
	public int deleteParticipant(int pid) {
        try {
            Connection con = DbResource.getDbConnection();
            PreparedStatement pstmt = con.prepareStatement("delete from participants where pid = ?");
            pstmt.setInt(1, pid);
            return pstmt.executeUpdate();
        } catch (Exception e) {
            System.err.println(e);
            return 0;
        }
    }
}

=================================================================================================================================

	Service classes - package com.funfit.service

	BatchService:

package com.funfit.service;

import java.util.List;

import com.funfit.bean.Batch;
import com.funfit.dao.BatchDao;

public class BatchService {
	
	BatchDao db = new BatchDao(); //create BatchDao obj
	
	public String addBatch(Batch batch) {
		if(db.addBatch(batch) > 0) {
			return "Batch details added";
		} else {
			return "Batch details not added";
		}
		
	}
	
	public List<Batch> viewAllBatch() {
		return db.viewAllBatches();
	}
	
	// Delete batches using the ID =  bid
	public String deleteBatch(int bid) {
        if (db.deleteBatch(bid) > 0) {
            return "Batch deleted successfully";
        } else {
            return "Failed to delete batch";
        }
    }

}

	ParticipantsService:

package com.funfit.service;

import java.util.List;

import com.funfit.bean.Participants;
import com.funfit.dao.ParticipantsDao;

public class ParticipantsService {
	ParticipantsDao pd = new ParticipantsDao(); // new ParticipantsDao obj
	
	public String addParticipants(Participants participants) { // create addParticipants method
		if(pd.addParticipants(participants) > 0) {
			return "Participant details added successfully";
		} else {
			return "Participants details not added";
		}
	}
	public List<Participants> viewAllParticipants() {
		return pd.viewAllParticipants();
	}
	
	// Delete participants using the ID
		public String deleteParticipant(int pid) {
	        if (pd.deleteParticipant(pid) > 0) {
	            return "Participant deleted successfully";
	        } else {
	            return "Failed to delete participant";
	        }
	    }
}

========================================================================================================

	Servlets - package com.funfit.controller

BatchController:

package com.funfit.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.funfit.bean.Batch;
import com.funfit.service.BatchService;

@WebServlet("/BatchController")
public class BatchController extends HttpServlet {
    private static final long serialVersionUID = 1L;
    
    BatchService bs = new BatchService();
       
    public BatchController() {
        super();
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        PrintWriter pw = response.getWriter();
        List<Batch> listOfBatch = bs.viewAllBatch();
        HttpSession hs = request.getSession();
        hs.setAttribute("batches", listOfBatch);
        String flagValue = request.getParameter("flag");
        if(flagValue.equals("2")) {
            response.sendRedirect("addParticipants.jsp");
        } else {
            response.sendRedirect("viewBatches.jsp");
        }
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //add the condition if the parameter is delete => call the deleteBatch function
    	String action = request.getParameter("action");
        if ("delete".equals(action)) {
        	PrintWriter pw = response.getWriter();
            response.setContentType("text/html");
            int bid = Integer.parseInt(request.getParameter("bid"));
            String result = bs.deleteBatch(bid);  // Calling deleteBatch method in BatchService
            pw.print(result);
            
        } else { // else call the addBatch method
            PrintWriter pw = response.getWriter();
            response.setContentType("text/html");
            String typeofbatch = request.getParameter("typeofbatch");
            String time = request.getParameter("time");
            RequestDispatcher rd = request.getRequestDispatcher("addBatch.jsp");
            Batch bb = new Batch();
            bb.setTypeofbatch(typeofbatch);
            bb.setTime(time);
            String result = bs.addBatch(bb);
            pw.print(result);
            rd.include(request, response);
        }
    }

    @Override
    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        
    }

    @Override
    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
       
    }
}


	ParticipantsController:

package com.funfit.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.funfit.bean.Batch;
import com.funfit.bean.Participants;
import com.funfit.service.ParticipantsService;

@WebServlet("/ParticipantsController")
public class ParticipantsController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	ParticipantsService ps = new ParticipantsService();
   
    public ParticipantsController() {
        super();
        
    }

	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		PrintWriter pw = response.getWriter();
		HttpSession hs = request.getSession();
		List<Participants> listOfParticipants = ps.viewAllParticipants();
		hs.setAttribute("participants", listOfParticipants);
		response.sendRedirect("viewParticipants.jsp");
	}

	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
		 String action = request.getParameter("action");
		 // if the parameter of the action is delete, then call the deleteParticipant method
	        if ("delete".equals(action)) {
	        	PrintWriter pw = response.getWriter();
	            response.setContentType("text/html");
	            int pid = Integer.parseInt(request.getParameter("pid"));
	            String result = ps.deleteParticipant(pid);  // Calling deleteParticipants method in ParticipantsService
	            pw.print(result);
	            
	        } else {

	        	PrintWriter pw = response.getWriter();
	        	response.setContentType("text/html");
	        	String fname = request.getParameter("fname");
	    		int age = Integer.parseInt(request.getParameter("age"));
	    		String phonenumber = request.getParameter("phonenumber");
	    		int bid = Integer.parseInt(request.getParameter("bid"));
	    		RequestDispatcher rd = request.getRequestDispatcher("addParticipants.jsp");
	    		
	    		Participants pp = new Participants();
	    		pp.setFname(fname);
	    		pp.setAge(age);
	    		pp.setPhonenumber(phonenumber);
	    		pp.setBid(bid);
	    		
	    		String result = ps.addParticipants(pp);
	    		pw.print(result);
	    		rd.include(request, response);
	        }
	    }
		
	
	
	@Override
	protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
	}
	
	@Override
	protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
	}

}

=============================================================================================================================

	JSP Pages

	index.jsp:

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>FunFit Application</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>
<body>
	<div class="container mt-5">
		<h2 class="text-center mb-4">FunFit Application!</h2>
		<div class="d-flex justify-content-center">
			<a href="addBatch.jsp" class="btn btn-primary me-2">Add Batch</a>
			<a href="BatchController?flag=2" class="btn btn-primary me-2">Add Participants</a>
			<a href="BatchController?flag=1" class="btn btn-primary me-2">View Batches</a>
			<a href="ParticipantsController" class="btn btn-primary">View Participants</a>
		</div>
	</div>
</body>
</html>


	addBatch.jsp:

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Add Batch Details</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>
<body>
<div class="container mt-5">
    <h2 class="text-center mb-4">Add Batch Details</h2>
    <form action="BatchController" method="post" class="p-4 border rounded bg-light">
        <div class="mb-3">
            <label for="typeofbatch" class="form-label">Type of Batch</label>
            <select name="typeofbatch" id="typeofbatch" class="form-select">
                <option value="">--Select Batch--</option>
                <option value="Morning">Morning</option>
                <option value="Evening">Evening</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="time" class="form-label">Time</label>
            <select name="time" id="time" class="form-select">
                <option value="">--Time--</option>
                <%
                for(int i=1, j=2; i<=12 && j<13; i++, j++){
                %>
                <option value="<%=i%>-<%=j%>"><%=i%>-<%=j%></option>
                <%
                }
                %>
            </select>
        </div>
        <div class="mb-3">
            <input type="submit" value="Add Batch" class="btn btn-primary">
            <input type="reset" value="Reset" class="btn btn-secondary">
        </div>
    </form>
    <div class="text-center mt-3">
        <a href="index.jsp" class="btn btn-link">Back</a>
    </div>
</div>
</body>
</html>

	addParticipants.jsp:

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="core" %>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Add Participants Details</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>
<body>
<div class="container mt-5">
    <h2 class="text-center mb-4">Add Participants Details</h2>
    <form action="ParticipantsController" method="post" class="p-4 border rounded bg-light">
        <div class="mb-3">
            <label for="fname" class="form-label">First Name</label>
            <input type="text" name="fname" id="fname" class="form-control">
        </div>
        <div class="mb-3">
            <label for="age" class="form-label">Age</label>
            <input type="number" name="age" id="age" class="form-control">
        </div>
        <div class="mb-3">
            <label for="phonenumber" class="form-label">Phone Number</label>
            <input type="text" name="phonenumber" id="phonenumber" class="form-control">
        </div>
        <div class="mb-3">
            <label for="bid" class="form-label">Batch</label>
            <select name="bid" id="bid" class="form-select">
                <core:forEach var="bid" items="${sessionScope.batches}">
                    <option value="<core:out value='${bid.getBid()}'/>">
                        <core:out value="${bid.getTypeofbatch()}"/> - <core:out value="${bid.getTime()}"/>
                    </option>
                </core:forEach>
            </select>
        </div>
        <div class="mb-3">
            <input type="submit" value="Add Participant" class="btn btn-primary">
            <input type="reset" value="Reset" class="btn btn-secondary">
        </div>
    </form>
    <div class="text-center mt-3">
        <a href="index.jsp" class="btn btn-link">Back</a>
    </div>
</div>
</body>
</html>


	viewBatches.jsp:

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="core" %>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Batch Details</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>
<body>
<div class="container mt-5">
    <h2 class="text-center mb-4">Batch Details</h2>
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Batch ID</th>
                <th>Type of Batch</th>
                <th>Time</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <core:forEach var="batch" items="${sessionScope.batches}">
                <tr>
                    <td><core:out value="${batch.getBid()}"/></td>
                    <td><core:out value="${batch.getTypeofbatch()}"/></td>
                    <td><core:out value="${batch.getTime()}"/></td>
                    <td>
                        <form action="BatchController" method="post" style="display:inline;">
                            <input type="hidden" name="action" value="delete">
                            <input type="hidden" name="bid" value="<core:out value='${batch.getBid()}'/>">
                            <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                        </form>
                    </td>
                </tr>
            </core:forEach>
        </tbody>
    </table>
    <div class="d-flex justify-content-center mt-4">
        <a href="index.jsp" class="btn btn-secondary">Back</a>
    </div>
</div>
</body>
</html>

	viewParticipants.jsp:

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="core"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Participants Details</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>
<body>
<div class="container mt-5">
    <h2 class="text-center mb-4">Participants Details</h2>
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Participant ID</th>
                <th>First Name</th>
                <th>Age</th>
                <th>Phone Number</th>
                <th>Batch ID</th>
            </tr>
        </thead>
        <tbody>
            <core:forEach var="participant" items="${sessionScope.participants}">
                <tr>
                    <td><core:out value="${participant.getPid()}"></core:out></td>
                    <td><core:out value="${participant.getFname()}"></core:out></td>
                    <td><core:out value="${participant.getAge()}"></core:out></td>
                    <td><core:out value="${participant.getPhonenumber()}"></core:out></td>
                    <td><core:out value="${participant.getBid()}"></core:out></td>
                    <td>
                        <form action="ParticipantsController" method="post" style="display:inline;">
                            <input type="hidden" name="action" value="delete">
                            <input type="hidden" name="pid" value="<core:out value='${participant.getPid()}'/>">
                            <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                        </form>
                    </td>
                </tr>
            </core:forEach>
        </tbody>
    </table>
    <div class="d-flex justify-content-center mt-4">
        <a href="index.jsp" class="btn btn-secondary">Back</a>
    </div>
</div>
</body>
</html>
